/* This file is part of ReaVer released under the GNU GPL.  
   Please read the LICENSE file packaged in the distribution */

%{
open NbacExpr
open Program

type formula =
| Assertion of NbacExpr.symtype NbacExpr.expr
| Initial of NbacExpr.symtype NbacExpr.expr
| Final of NbacExpr.symtype NbacExpr.expr

type cequ_type = Jump | Flow
%}

/* %============================================================== */
/* \section{Tokens} */
/* %============================================================== */

%token TK_EOF

/* delimiters */
%token TK_LPAREN TK_RPAREN TK_LBRACE TK_RBRACE TK_LBRACKET TK_RBRACKET
%token TK_COMMA TK_SEMI
%token TK_PRIME
%token TK_DOT
%token TK_COLON
/* boolean operations */
%token TK_TRUE TK_FALSE
%token TK_NOT TK_OR TK_AND TK_NEQUAL TK_EQUAL TK_SHARP TK_IMPLY TK_IN

/* arithmetic operations */
%token TK_MUL TK_DIV TK_PLUS TK_MINUS

/* mixed operations */
%token TK_GREATEREQUAL TK_LESSEQUAL TK_GREATER TK_LESS TK_UP

/* control */
%token TK_IF TK_THEN TK_ELSE

/* declarations */
%token TK_TYPEDEF TK_ENUM TK_BOOL TK_INT TK_REAL TK_CLOCK TK_UINT TK_SINT
%token TK_INVARIANT TK_INITIAL TK_FINAL TK_ASSERTION
%token TK_INPUT
%token TK_LOCAL
%token TK_STATE
%token TK_CONST
%token TK_TRANS TK_DEFINITION
%token TK_AUTOMATON

%token <int> TK_NUM
%token <Mpqf.t> TK_MPQF
%token <string> TK_ID

/* associativity */
%right TK_IMPLY
%left TK_OR
%left TK_AND
%nonassoc TK_NOT TK_UP
%nonassoc TK_GREATER TK_GREATEREQUAL TK_LESS TK_LESSEQUAL TK_EQUAL TK_NEQUAL
%left TK_PLUS TK_MINUS
%left TK_MUL TK_DIV

%start prog

%type <NbacExpr.prog> prog
%type <NbacExpr.symtype NbacExpr.expr list> lincons_conjunction
%type <NbacExpr.typ> typ

%%

/* %============================================================== */
/* \section{Rules} */
/* %============================================================== */

prog: declarations definitions transitions formulas TK_EOF
  { let (j,f) = $3 in
    let (assertion,initial,final) = $4 in
    { NbacExpr.decl=$1;
      NbacExpr.defs=$2;
      NbacExpr.jump=j;
      NbacExpr.flow=f;
      NbacExpr.assertion=assertion;
      NbacExpr.initial=initial;
      NbacExpr.final=final
    } }

/* %======================================================================== */
/* \subsection{Declarations} */
/* %======================================================================== */

declarations: typedef state input local
{ let (typdef,label) = $1 in
  { typdef=typdef;
    state=$2;
    input=$3;
    local=$4 } }

/* Types */

typedef:
  /* Vide */ 
{ let cmp = fun x y -> Pervasives.compare x y in
  (PMappe.empty cmp,PMappe.empty cmp) 
}
| TK_TYPEDEF typdecls { $2 }

typdecls:
  typdecls typdecl
{
  let (typdef,label) = $1 in
  let (t,ls) = $2 in
  let ntypdef =
    if PMappe.mem t typdef then
      raise (NbacExpr.NbacParseError (Format.sprintf "Error: in type definitions, type %s defined twice" t))
    else
      PMappe.add t (`Benum (Array.of_list ls)) typdef
  in
  let nlabel =
    List.fold_left
      (begin fun label s ->
	if PMappe.mem s label then
	  raise (NbacParseError (Format.sprintf "Error: in type definitions, label %s defined twice" s))
	else
	  PMappe.add s t label
      end)
      label ls
  in
  (ntypdef,nlabel)
}
| /* Vide */ 
{ 
let cmp = fun x y -> Pervasives.compare x y in
  (PMappe.empty cmp,PMappe.empty cmp)
}

typdecl:
  id TK_EQUAL TK_ENUM TK_LBRACE idlist TK_RBRACE TK_SEMI
    { ($1,List.rev $5) }

/* Variables */

state:
  /* Vide */ { Mappe.empty }
  | TK_STATE vardecls { $2 }
input:
  /* Vide */ { Mappe.empty }
| TK_INPUT vardecls { $2 }
local:
  /* Vide */ { Mappe.empty }
| TK_LOCAL vardecls { $2 }

vardecls:
  vardecls vardecl
{
  let (lvar,t) = $2 in
  List.fold_left
    (begin fun res var ->
      if Mappe.mem var $1 then
	raise (NbacParseError (Format.sprintf "Error: in variable declarations, variable %s defined twice" var))
      else
	Mappe.add var t res
    end)
    $1
    lvar
}
| { Mappe.empty }

vardecl:
  idlist TK_COLON typ TK_SEMI { ($1,$3) }

id:
  TK_ID { $1 }
idlist:
  id { [$1] }
| idlist TK_COMMA id { $3::$1 }

typ:
  TK_BOOL { `Bool }
| TK_INT { (`Int) }
| TK_REAL { (`Real) }
| bint { (`Bint $1) }
| id { (`Benum $1) }

bint:
  TK_UINT TK_LBRACKET TK_NUM TK_RBRACKET
{
  if $3 < 0 then
    raise (NbacParseError (Print.sprintf "Error: in type uint[x], x should be positive"))
  ;
  (false,$3)
}
| TK_SINT TK_LBRACKET TK_NUM TK_RBRACKET
{
  if $3 < 0 then
    raise (NbacParseError (Print.sprintf "Error: in type sint[x], x should be positive"))
  ;
  (true,$3)
}
/* %======================================================================== */
/* \subsection{Equations} */
/* %======================================================================== */

definitions:
  /* Vide */ { Mappe.empty }
| TK_DEFINITION defs { $2 }
defs:
  def {
    let (s,e) = $1 in
    Mappe.add s e Mappe.empty
  }
| defs def
  {
    let (s,e) = $2 in
    if Mappe.mem s $1 then
      raise (NbacParseError (Format.sprintf "Error: equation of variable %s defined twice" s))
    else
      Mappe.add s e $1
  }

def: id TK_EQUAL expr TK_SEMI { ($1,$3) }

transitions: TK_TRANS equations { $2 }
equations:
  equation {
    let (v,e,t) = $1 in
    match t with
      |Jump -> (Mappe.add v e Mappe.empty, Mappe.empty)
      |Flow -> (Mappe.empty, Mappe.add v e Mappe.empty)
}
| equations equation
  {
    let (v,e,t) = $2 in
    let (j,f) = $1 in
    match t with
      |Jump ->
        if Mappe.mem v j then
          raise (NbacParseError (Format.sprintf 
            "Error: transition function of variable %s defined twice" v))
        else (Mappe.add v e j, f)
      |Flow ->
        if Mappe.mem v f then
          raise (NbacParseError (Format.sprintf 
            "Error: differential evolution of variable %s defined twice" v))
        else (j, Mappe.add v e f)
  }

equation: dequ { $1 } | cequ { $1 }
dequ: id TK_PRIME TK_EQUAL expr TK_SEMI { ($1,$4,Jump) }
cequ: id TK_DOT TK_EQUAL expr TK_SEMI { ($1,$4,Flow) }


/* %======================================================================== */
/* \subsection{Formulas} */
/* %======================================================================== */

/* It remains to specify the syntax giving sets of initial states,
final states, and assertion formula.  */

formulas: formulas_list
{
  let assertion = ref (Cst(`Bool(true)))
  and initial = ref (Cst(`Bool(false)))
  and final = ref (Cst(`Bool(false)))
  in
  List.iter
    (function
      | Assertion e -> assertion := e
      | Initial e -> initial := e
      | Final e -> final := e)
  $1;
  (!assertion,!initial,!final)
}
formulas_list:
  formulas_list formulas_elt
    { $2::$1 }
| formulas_elt
    { [$1] }
formulas_elt:
  assertion { Assertion $1 }
| initial { Initial $1 }
| final { Final $1 }
| invariant_final { Final(Unop(`Not,$1)) }

assertion: TK_ASSERTION expr TK_SEMI { $2 }
initial: TK_INITIAL expr TK_SEMI { $2 }
final: TK_FINAL expr TK_SEMI { $2 }
invariant_final: TK_INVARIANT expr TK_SEMI { $2 }

/* %======================================================================== */
/* \subsection{Standard expressions} */
/* %======================================================================== */

/* Expressions are Boolean, linear affine expression, or special
expression to define the behaviour of continuous evolving
variables. Type checking is not done in that place, so the syntax is
quite free.  */

expr:
  expr1 { $1 }
| TK_IF expr TK_THEN expr TK_ELSE expr { If($2,$4,$6) }
expr1:
  expr2 { $1 }
| expr1 TK_OR expr2   { Binop(`Bool(Or),$1,$3) }
expr2:
  expr3 { $1 }
| expr2 TK_AND expr3  { Binop(`Bool(And),$1,$3) }
expr3:
  expr4 { $1 }
| expr4 TK_NEQUAL expr4  { Binop(`Bool(NEQ),$1,$3) }
| expr4 TK_EQUAL expr4   { Binop(`Bool(EQ),$1,$3) }
| expr8 TK_IN TK_LBRACE list_expr TK_RBRACE  { In($1,$4) }
expr4:
  expr5 { $1 }
| TK_NOT expr4       { Unop(`Not,$2) }
| TK_SHARP TK_LPAREN list_expr TK_RPAREN { Excl($3) }
expr5:
  expr6 { $1 }
| expr6 TK_GREATEREQUAL expr6 { Binop(`Bool(GEQ),$1,$3) }
| expr6 TK_GREATER expr6 { Binop(`Bool(GT),$1,$3) }
| expr6 TK_LESSEQUAL expr6 { Binop(`Bool(LEQ),$1,$3) }
| expr6 TK_LESS expr6 { Binop(`Bool(LT),$1,$3) }
| TK_UP expr6 { Unop(`Up,$2) }
expr6:
  expr7 { $1 }
| expr6 TK_PLUS expr7 { Binop(`Apron(Apron.Texpr1.Add,Apron.Texpr1.Real,Apron.Texpr1.Near),$1,$3) }
| expr6 TK_MINUS expr7 { Binop(`Apron(Apron.Texpr1.Sub,Apron.Texpr1.Real,Apron.Texpr1.Near),$1,$3) }
expr7:
  expr8 { $1 }
| expr7 TK_MUL expr8 { Binop(`Apron(Apron.Texpr1.Mul,Apron.Texpr1.Real,Apron.Texpr1.Near),$1,$3) }
| expr7 TK_DIV expr8 { Binop(`Apron(Apron.Texpr1.Div,Apron.Texpr1.Real,Apron.Texpr1.Near),$1,$3) }
expr8:
  cst { Cst($1) }
| id { Ref($1) }
| numcst id { Binop(`Apron(Apron.Texpr1.Mul,Apron.Texpr1.Real,Apron.Texpr1.Near),Cst($1),Ref($2)) }
| TK_LPAREN expr TK_RPAREN { $2 }
| TK_MINUS expr8 { Unop(`Apron(Apron.Texpr1.Neg,Apron.Texpr1.Real,Apron.Texpr1.Near),$2) }
boolcst:
  TK_TRUE  { `Bool(true) }
| TK_FALSE { `Bool(false) }
| bint TK_LPAREN TK_NUM TK_RPAREN { `Bint($1,$3) }
| bint TK_LPAREN TK_MINUS TK_NUM TK_RPAREN { `Bint($1,-$4) }
numcst:
  TK_NUM { `Apron(Apron.Coeff.Scalar(Apron.Scalar.of_int($1))) }
| TK_MPQF { `Apron(Apron.Coeff.Scalar(Apron.Scalar.of_mpqf($1))) }

cst:
  boolcst  { $1 }
| numcst   { $1 }


list_expr:
  expr { [$1] }
| list_expr TK_COMMA expr { $3::$1 }

lincons_conjunction:
  lincons_conjunction TK_AND lincons
    { $3::$1 }
| lincons
    { [$1] }
| TK_TRUE
    { [] }
lincons:
  linexpr1 TK_GREATEREQUAL linexpr1 { Binop(`Bool(GEQ),$1,$3) }
| linexpr1 TK_GREATER linexpr1 { Binop(`Bool(GT),$1,$3) }
| linexpr1 TK_EQUAL linexpr1 { Binop(`Bool(EQ),$1,$3) }
| linexpr1 TK_LESSEQUAL linexpr1 { Binop(`Bool(LEQ),$3,$1) }
| linexpr1 TK_LESS linexpr1 { Binop(`Bool(LT),$3,$1) }

linexpr1:
  linexpr1 TK_PLUS linexpr2 { Binop(`Apron(Apron.Texpr1.Add,Apron.Texpr1.Real,Apron.Texpr1.Near),$1,$3) }
| linexpr1 TK_MINUS linexpr2 { Binop(`Apron(Apron.Texpr1.Sub,Apron.Texpr1.Real,Apron.Texpr1.Near),$1,$3) }
| linexpr2 { $1 }
linexpr2:
  linexpr2 TK_MUL linexpr3 { Binop(`Apron(Apron.Texpr1.Mul,Apron.Texpr1.Real,Apron.Texpr1.Near),$1,$3) }
| linexpr2 TK_DIV linexpr3 { Binop(`Apron(Apron.Texpr1.Div,Apron.Texpr1.Real,Apron.Texpr1.Near),$1,$3) }
| linexpr3 { $1 }
linexpr3:
  numcst { Cst($1) }
| id { Ref($1) }
| numcst id { Binop(`Apron(Apron.Texpr1.Mul,Apron.Texpr1.Real,Apron.Texpr1.Near),Cst($1),Ref($2)) }
| TK_LPAREN linexpr1 TK_RPAREN { $2 }
| TK_MINUS linexpr3 { Unop(`Apron(Apron.Texpr1.Neg,Apron.Texpr1.Real,Apron.Texpr1.Near),$2) }
