(******************************************************************************)
(* NbacTrans *)
(* Nbac program translation *)
(* author: Peter Schrammel *)
(* version: 0.9.0 *)
(* This file is part of ReaVer released under the GNU GPL.  
   Please read the LICENSE file packaged in the distribution *)
(******************************************************************************)

let logger = {Log.fmt=Format.std_formatter; 
              Log.module_name="NbacTrans";
              Log.level=Log.Debug}

let default_df2cf_d = "d"
let default_df2cf_h = "h:d=Contact,c=Contact"
let default_strat_d = "aB;aB:b;pIF;pMD;rT;rAB;rAS;rAF;rAD;aA"
let default_strat_h = "aB;aB:b;pIF;pMHB;pQ;rT;aH"

(* returns the set of all labels of enumerated types *)
let all_labels decl
  =
  PMappe.fold 
    (fun (typ:NbacExpr.symtype) (def:NbacExpr.typdef) accuset -> 
      match def with 
      |`Benum(edef) -> Sette.union accuset (Util.array2sette edef)
    )
    decl.Program.typdef
    Sette.empty

(******************************************************************************)
(* sorts the equations according to variable dependencies
   variables occurring in eq: (rvar,lvars)
   > ... dependent on
   eq2 > eq1 if rvar1 in lvar2
*)
let sort_eqs eqs statevars inputvars labels =
  (* builds the set of variables in the left-hand side expr*)
  let rec var_set expr : NbacExpr.symtype Sette.t =
    match expr with
    | NbacExpr.Ref(var) -> Sette.add var Sette.empty 
    | NbacExpr.Unop(_,e) -> (var_set e)
    | NbacExpr.Binop(_,e1,e2) -> Sette.union (var_set e1) (var_set e2)
    | NbacExpr.If(e1,e2,e3) -> 
        Sette.union (Sette.union (var_set e1) (var_set e2)) 
                             (var_set e3)
    | NbacExpr.Excl(le) -> 
        List.fold_left (fun lle ee -> Sette.union (var_set ee) lle) 
                         Sette.empty le
    | NbacExpr.In(e,le) -> 
        List.fold_left (fun lle ee-> Sette.union (var_set ee) lle) 
                         (var_set e) le
    | _ -> Sette.empty
  in
  (* map from rvar to lvars *)
  let eqs_vars1 =  Mappe.map var_set eqs in

(*  Log.debug3_o logger (fun fmt vars -> Mappe.print Format.pp_print_string 
       (Sette.print Format.pp_print_string) fmt vars)
     "dependencies: " eqs_vars1;*)

  (* remove dependencies on state and input variables (and labels)*)
  let eqs_vars2 = Mappe.mapi 
    (fun a b -> (Sette.diff b 
                  (Sette.union 
                     (Sette.union statevars inputvars) 
                     labels)))
    eqs_vars1 
  in

(*  Log.debug3_o logger (fun fmt vars -> Mappe.print Format.pp_print_string 
       (Sette.print Format.pp_print_string) fmt vars)
     "dependencies without state and input variables: " eqs_vars2;*)

  (* sort equations by cutting arcs in the graph *)
  let rec sort eqs_varset =
    let (indep,dep) = Mappe.partition (fun k v -> Sette.is_empty v) eqs_varset 
    in

(*    Log.debug3_o logger (fun fmt (indep,dep) -> Format.pp_print_newline fmt ();
      Format.pp_print_string fmt "independent=";
      Mappe.print Format.pp_print_string 
              (Sette.print Format.pp_print_string) 
              fmt indep;
      Format.pp_print_newline fmt ();
      Format.pp_print_string fmt "dependent=";
      Mappe.print Format.pp_print_string 
              (Sette.print Format.pp_print_string) 
              fmt dep)
        "partitioning:" (indep,dep);*)

    if Mappe.is_empty indep && not (Mappe.is_empty dep) then 
      raise (Failure "definitions contain circular dependencies");
    let indepset = Mappe.maptoset indep in
    let reddep = Mappe.mapi (fun a b -> (Sette.diff b indepset)) dep
    in 
    if Mappe.is_empty reddep then Util.mappe2list (Mappe.interset eqs indepset) 
    else List.append (Util.mappe2list (Mappe.interset eqs indepset)) (sort reddep)
  (* return a list of sorted equations *)
  in sort eqs_vars2


(******************************************************************************)
(* translates an expression to Bddapron *)
let translate_expr env expr treqs zeros =
  let env0 = env.Env.env in
  let cond0 = env.Env.cond in
  (* recursively goes through the abstract syntax tree *)
  let rec traverse 
    (expr: NbacExpr.symtype NbacExpr.expr) 
    (treqs: (NbacExpr.symtype * NbacExpr.symtype Bddapron.Expr0.t) list) 
    (zeros: Env.zerodefs_t)
    : 
    NbacExpr.symtype Bddapron.Expr0.t * Env.zerodefs_t
    =

(*    Log.debug3_o logger (NbacExpr.print_expr)
      "traverse on expression " expr;*)

    let tr_boolexpr e zeros = 
      let (ee,zs) = traverse e treqs zeros in
      (Bddapron.Expr0.Bool.of_expr ee, zs)
    in
    let tr_apronexpr e zeros =
      let (ee,zs) = traverse e treqs zeros in
      (Bddapron.Expr0.Apron.of_expr ee, zs)
    in
    match expr with
    | NbacExpr.Cst cst ->
	begin match cst with
	| `Bool v -> (`Bool(Bddapron.Expr0.Bool.of_bool env0 cond0 v),zeros)
	| `Bint(typ,v) -> 
            (`Bint(Bddapron.Expr0.Bint.of_int env0 cond0 (`Bint(typ)) v),zeros) 
	| `Apron v -> (`Apron(Bddapron.Expr0.Apron.cst env0 cond0 v),zeros)
	end
    | NbacExpr.Ref(var) -> 
        (* substitute variables by already translated expressions *)
        begin try 
            let subexpr = List.assoc var treqs in
(*            Log.debug3_o logger (Format.pp_print_string) var 
              " substituted by its definition";*)
            (subexpr,zeros)
        with 
        | Not_found -> (Bddapron.Expr0.var env0 cond0 var,zeros)
        end
    | NbacExpr.Unop(op,e) ->
	begin match op with
	| `Not -> 
            let (ee,zs) = tr_boolexpr e zeros in
            (`Bool(Bddapron.Expr0.Bool.dnot env0 cond0 ee),zs)
	| `Up -> 
            let (zexpr,zs) = tr_apronexpr e zeros in
            let zvar = try Env.find_zero_var zs zexpr 
              with Not_found -> Env.get_newzero_var env in
            let zerodefs = List.append zs [(zvar,zexpr)] in
(*            Log.debug3_o logger (Env.print_zero_defs env) 
              "new zero_defs: " zerodefs;*)
            (`Bool(Bddapron.Expr0.Bool.var env0 cond0 zvar),zerodefs)
	| `Apron (unop,typ,round) -> 
          begin match unop with
          | Apron.Texpr0.Neg -> 
              let (ee,zs) = tr_apronexpr e zeros in
             (`Apron(Bddapron.Expr0.Apron.negate env0 cond0 ee),zs)
          | Apron.Texpr0.Cast -> 
              let (ee,zs) = tr_apronexpr e zeros in
              (`Apron(Bddapron.Expr0.Apron.cast env0 cond0 
                ~typ:typ ~round:round ee),zs)
          | Apron.Texpr0.Sqrt -> 
              let (ee,zs) = tr_apronexpr e zeros in
              (`Apron(Bddapron.Expr0.Apron.sqrt env0 cond0  
                ~typ:typ ~round:round ee),zs)
          end
	end 
     | NbacExpr.Binop(op,e1,e2) ->
	begin match op with
	| `Bool bbinop ->
          let app_bint_bbinop op e1 e2 = op env0 cond0 e1 e2 in
          let app_apron_bbinop op e1 e2 =
              op env0 cond0 (Bddapron.Expr0.Apron.sub env0 cond0 e1 e2)
          in
            begin match bbinop with 
          | NbacExpr.Or  -> 
              let (ee1,zs) = tr_boolexpr e1 zeros in
              let (ee2,zs) = tr_boolexpr e2 zs in
              (`Bool(Bddapron.Expr0.Bool.dor env0 cond0 ee1 ee2),zs)
          | NbacExpr.And -> 
              let (ee1,zs) = tr_boolexpr e1 zeros in
              let (ee2,zs) = tr_boolexpr e2 zs in
              (`Bool(Bddapron.Expr0.Bool.dand env0 cond0 ee1 ee2),zs)
          | NbacExpr.EQ  -> 
              let (ee1,zs) = traverse e1 treqs zeros in
              let (ee2,zs) = traverse e2 treqs zs in
              (`Bool(Bddapron.Expr0.eq env0 cond0 ee1 ee2),zs)
          | NbacExpr.NEQ -> 
              let (ee1,zs) = traverse e1 treqs zeros in
              let (ee2,zs) = traverse e2 treqs zs in
             (`Bool(Bddapron.Expr0.Bool.dnot env0 cond0 
             (Bddapron.Expr0.eq env0 cond0 ee1 ee2)),zs)
          | NbacExpr.GT  -> 
            begin
              let (ee1,zs) = traverse e1 treqs zeros in
              let (ee2,zs) = traverse e2 treqs zs in
              match (ee1,ee2) with
		|(`Apron(eee1),`Apron(eee2)) -> 
                    (`Bool(app_apron_bbinop Bddapron.Expr0.Apron.sup eee1 eee2),
                     zs)
		|(`Bint(eee1),`Bint(eee2)) -> 
                    (`Bool(app_bint_bbinop Bddapron.Expr0.Bint.sup eee1 eee2),
                     zs)
		|_ -> failwith "type mismatch in comparison operator"
            end
          | NbacExpr.GEQ -> 
            begin
              let (ee1,zs) = traverse e1 treqs zeros in
              let (ee2,zs) = traverse e2 treqs zs in
              match (ee1,ee2) with
		|(`Apron(eee1),`Apron(eee2)) -> 
                    (`Bool(app_apron_bbinop Bddapron.Expr0.Apron.supeq 
                     eee1 eee2),zs)
		|(`Bint(eee1),`Bint(eee2)) -> 
                    (`Bool(app_bint_bbinop Bddapron.Expr0.Bint.supeq eee1 eee2),
                     zs)
		|_ -> failwith "type mismatch in comparison operator"
            end
          | NbacExpr.LEQ ->   
            begin
              let (ee1,zs) = traverse e1 treqs zeros in
              let (ee2,zs) = traverse e2 treqs zs in
              match (ee1,ee2) with
		|(`Apron(eee1),`Apron(eee2)) -> 
                    (`Bool(app_apron_bbinop Bddapron.Expr0.Apron.supeq 
                     eee2 eee1),zs)
		|(`Bint(eee1),`Bint(eee2)) -> 
                    (`Bool(app_bint_bbinop Bddapron.Expr0.Bint.supeq eee2 eee1),
                     zs)
		|_ -> failwith "type mismatch in comparison operator"
            end
          | NbacExpr.LT -> 
            begin
              let (ee1,zs) = traverse e1 treqs zeros in
              let (ee2,zs) = traverse e2 treqs zs in
              match (ee1,ee2) with
		|(`Apron(eee1),`Apron(eee2)) -> 
                    (`Bool(app_apron_bbinop Bddapron.Expr0.Apron.sup eee2 eee1),
                     zs)
		|(`Bint(eee1),`Bint(eee2)) -> 
                    (`Bool(app_bint_bbinop Bddapron.Expr0.Bint.sup eee2 eee1),
                     zs)
		|_ -> failwith "type mismatch in comparison operator"
            end
           end
	| `Apron(binop,typ,round) ->
          let app_apron_binop 
            (op:NbacExpr.symtype Bddapron.Env.t -> NbacExpr.symtype Bddapron.Cond.t ->
             ?typ:Apron.Texpr1.typ -> ?round:Apron.Texpr1.round ->
             NbacExpr.symtype Bddapron.Expr0.Apron.t -> 
             NbacExpr.symtype Bddapron.Expr0.Apron.t -> 
             NbacExpr.symtype Bddapron.Expr0.Apron.t) e1 e2 = 
            op env0 cond0 ~typ:typ ~round:round e1 e2 in
          let app_bint_binop op e1 e2 = op env0 cond0 e1 e2 in
          let (ee1,zs) = traverse e1 treqs zeros in
          let (ee2,zs) = traverse e2 treqs zs in
          begin match binop with
          | Apron.Texpr0.Add -> 
              begin match (ee1,ee2) with
		|(`Apron(eee1),`Apron(eee2)) -> 
                    (`Apron(app_apron_binop (Bddapron.Expr0.Apron.add) 
                     eee1 eee2),zs)
		|(`Bint(eee1),`Bint(eee2)) -> 
                    (`Bint(app_bint_binop Bddapron.Expr0.Bint.add eee1 eee2),
                     zs)
		|_ -> failwith "type mismatch in arithmetic operator"
             end
          | Apron.Texpr0.Sub -> 
             begin match (ee1,ee2) with
		|(`Apron(eee1),`Apron(eee2)) -> 
                    (`Apron(app_apron_binop (Bddapron.Expr0.Apron.sub) 
                       eee1 eee2),zs)
		|(`Bint(eee1),`Bint(eee2)) -> 
                    (`Bint(app_bint_binop Bddapron.Expr0.Bint.sub eee1 eee2),
                     zs)
		|_ -> failwith "type mismatch in arithmetic operator"
             end
          | Apron.Texpr0.Mul ->
             begin match (ee1,ee2) with
		|(`Apron(eee1),`Apron(eee2)) -> 
                    (`Apron(app_apron_binop (Bddapron.Expr0.Apron.mul) 
                       eee1 eee2),zs)
		|(`Bint(eee1),`Bint(eee2)) -> 
                    (`Bint(app_bint_binop Bddapron.Expr0.Bint.mul eee1 eee2),
                     zs)
		|_ -> failwith "type mismatch in arithmetic operator"
             end
          | Apron.Texpr0.Div -> 
             begin match (ee1,ee2) with
		|(`Apron(eee1),`Apron(eee2)) -> 
                    (`Apron(app_apron_binop (Bddapron.Expr0.Apron.div) 
                       eee1 eee2),zs)
		|(`Bint(eee1),`Bint(eee2)) -> 
                    failwith "division not supported for enumerated integers"
		|_ -> failwith "type mismatch in arithmetic operator"
             end
          | Apron.Texpr0.Mod -> 
             begin match (ee1,ee2) with
		|(`Apron(eee1),`Apron(eee2)) -> 
                   (`Apron(app_apron_binop (Bddapron.Expr0.Apron.gmod) 
                       eee1 eee2),zs)
		|(`Bint(eee1),`Bint(eee2)) -> 
                    failwith "module not supported for enumerated integers"
		|_ -> failwith "type mismatch in arithmetic operator"
             end
          end
       end
    | NbacExpr.If(e1,e2,e3) -> 
        let (ee1,zs) = tr_boolexpr e1 zeros in
        let (ee2,zs) = traverse e2 treqs zs in
        let (ee3,zs) = traverse e3 treqs zs in
        (Bddapron.Expr0.ite env0 cond0 ee1 ee2 ee3,zs)
    | NbacExpr.Excl(le) -> 
        let (trlist,zs) = List.fold_right
          (fun e (trlist,zs) -> 
            let (ee,zs) = tr_boolexpr e zs in 
            (ee::trlist,zs))
          le 
          ([],zeros)
        in
        (* -e_j & ... & -e_n *)
        let allfalse trlrest = 
          List.fold_left
            (fun e1 e2 -> Bddapron.Expr0.Bool.dand env0 cond0 
              (Bddapron.Expr0.Bool.dnot env0 cond0 e1) e2) 
            (Bddapron.Expr0.Bool.dtrue env0 cond0) trlrest
        in
        (* -e_1 & ... & e & ... & -e_n *)
        let rec atmost1true trlrest e =
          match trlrest with 
          | [] -> (Bddapron.Expr0.Bool.dtrue env0 cond0)
          | hd::tl -> 
             if hd=e then 
               Bddapron.Expr0.Bool.dand env0 cond0 hd (allfalse tl)
             else
               Bddapron.Expr0.Bool.dand env0 cond0 
                 (Bddapron.Expr0.Bool.dnot env0 cond0 hd) (atmost1true tl e)
        in
        (* (e_1 & -...) or (-e1 & e2 & -...) or ...(-... & e_n) *)
        let rec disj trl trlrest = 
          match trlrest with 
          | [] -> allfalse trl
          | hd::tl ->  Bddapron.Expr0.Bool.dor env0 cond0
            (atmost1true trlist hd) (disj trl tl)
        in
        (`Bool(disj trlist trlist),zeros)
    | NbacExpr.In(e,le) -> 
        let (tre,zs) = traverse e treqs zeros in
        let (tr,zs) = 
          List.fold_right
            (fun e (tr,zs) -> 
              let (e,zs) = traverse e treqs zs in
              (Bddapron.Expr0.Bool.dor env0 cond0 tr 
                 (Bddapron.Expr0.eq env0 cond0 tre e),zs))
            le
            (Bddapron.Expr0.Bool.dfalse env0 cond0,zs)
        in
        (`Bool(tr),zs)
   in
  traverse expr treqs zeros


(******************************************************************************)
(* translates a program to Bddapron *)
let translate_prog prog env =
  (* translate definitions (local vars), previously translated vars are used for
       substitutions in dependent equations *)

  Log.debug3 logger "processing definitions...";
  Log.debug3_o logger (fun fmt defs ->  Mappe.iter (fun a b -> 
                Format.print_string a; Format.print_string " = ";
                NbacExpr.print_expr fmt b) defs)
               "" prog.NbacExpr.defs;

  let labels = all_labels prog.NbacExpr.decl in
  let (trdefs,zeros0) = List.fold_left 
                (fun (treq,zzs) (v,e) -> 
                  let (ee,zs) = translate_expr env e treq zzs in
                  ((v,ee)::treq, zs))
                ([],[])
                (sort_eqs prog.NbacExpr.defs 
                  (Mappe.maptoset prog.NbacExpr.decl.Program.state)
                  (Mappe.maptoset prog.NbacExpr.decl.Program.input)
                  labels)
  in
  Log.debug3_o logger (Env.print_zero_defs env) 
    "zero_defs0: " zeros0;

  Log.debug3 logger "processing transitions...";
  Log.debug3_o logger (fun fmt defs ->  Mappe.iter (fun a b -> 
                Format.print_string a; Format.print_string " = ";
                NbacExpr.print_expr fmt b) defs)
               "" prog.NbacExpr.jump;

  (* translate transitions, use 'trdefs' to substitute local variables *)
  let (jump,zeros1) = List.fold_right
      (fun (v,e) (eqs,zzs) ->                   
         let (ee,zs) = translate_expr env e trdefs zzs in
         Log.debug3_o logger (Env.print_zero_defs env) 
           ("zero_defs in "^v^" equation: ") zs;
         ((v,ee)::eqs,zs))
      (Util.mappe2list prog.NbacExpr.jump) 
      ([],zeros0)
  in
  Log.debug3_o logger (Env.print_zero_defs env) 
    "zero_defs1: " zeros1;
  let (flow,zeros) = List.fold_right 
      (fun (v,e) (eqs,zzs) ->                   
         let (ee,zs) = translate_expr env e trdefs zzs in
         ((v,ee)::eqs,zs))
      (Util.mappe2list prog.NbacExpr.flow) ([],zeros1)
  in
  Log.debug3_o logger (Env.print_zero_defs env) 
    "zero_defs: " zeros;
  let (initial,_) = translate_expr env prog.NbacExpr.initial trdefs [] in
  let (final,_) = translate_expr env prog.NbacExpr.final trdefs [] in
  let (assertion,_) = translate_expr env prog.NbacExpr.assertion trdefs [] in

  Program.make_dfprog jump flow zeros
    (Bddapron.Expr0.Bool.of_expr initial)
    (Bddapron.Expr0.Bool.of_expr final)
    (Bddapron.Expr0.Bool.of_expr assertion)
   

(******************************************************************************)
(* parses an NBAC input file *)
let parse inputfile =
  let prog = 
    Parse.parse_file ~lexer:NbacLexer.lexBac ~parser:NbacParser.prog inputfile
  in
  NbacSyntaxCheck.check_prog prog;
  let (default_df2cf,default_strat) = 
    if Mappe.is_empty prog.NbacExpr.flow then (default_df2cf_d,default_strat_d) 
    else (default_df2cf_h,default_strat_h)
  in
  (prog.NbacExpr.decl,(translate_prog prog),default_df2cf, default_strat)
